import { Injectable, Logger } from '@nestjs/common'
import * as nodemailer from 'nodemailer'
import { CreateEmailDto } from './dto/create-email.dto'
import { Cron } from '@nestjs/schedule'
import axios from 'axios'
import { InjectRepository } from '@nestjs/typeorm'
import { FacebookAd } from '@models/facebook-ad.entity'
import moment from 'moment-timezone'
import { Repository, Raw, LessThanOrEqual, MoreThanOrEqual } from 'typeorm'
import { User } from '@models/user.entity'
import { CreditTransaction } from '@models/credit-ransaction .entity'
import { AdInsight } from '@models/ad-insight.entity'
const formatCurrency = (v) => Number(v).toLocaleString('en-US') // 1,234,567
const format2 = (v) => Number(v).toFixed(2) // 2 ch·ªØ s·ªë th·∫≠p ph√¢n

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name)
  constructor(
    @InjectRepository(AdInsight) private readonly adInsightRepo: Repository<AdInsight>,
    @InjectRepository(CreditTransaction) private readonly creditRepo: Repository<CreditTransaction>,
    @InjectRepository(User) private readonly userRepo: Repository<User>,
    @InjectRepository(FacebookAd)
    private readonly facebookAdRepo: Repository<FacebookAd>,
  ) { }

  private transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: '2203viettt@gmail.com',
      pass: 'tpzhvdoemquprhlo',
    },
  })

  async sendMailPassword({ to, subject, html }: { to: string; subject: string; html: string }) {
    console.log(`Sending email to: ${to}, subject: ${subject}`);

    return this.transporter.sendMail({
      from: '2203viettt@gmail.com',
      to,
      subject,
      html,
    });
  }



  async sendCredits(data: any, user: User) {
    // const { fullName, email, phone, zalo } = data
    const userData = await this.userRepo.findOne({ where: { email: user.email } })

    console.log(`data`, data);


    const mailOptions = {
      from: '2203viettt@gmail.com',
      to: 'nextadsai@gmail.com',
      subject: `ƒê√£ y√™u c·∫ßu thanh to√°n 179k mua 500 credits`,
      html: `
        <h3>Th√¥ng tin ng∆∞·ªùi li√™n h·ªá:</h3>
        <p><strong>H·ªç t√™n:</strong> ${userData.fullName}</p>
        <p><strong>Email:</strong> ${userData.email}</p>
        <p><strong>Phone:</strong> ${userData.phone}</p>
        <p><strong>Zalo:</strong> ${userData.zalo || 'Kh√¥ng cung c·∫•p'}</p>
      `,
    }

    try {
      const info = await this.transporter.sendMail(mailOptions)
      const transaction = new CreditTransaction()
      transaction.paymentDate = new Date()
      transaction.amountPaidVnd = data.vnd || 179000
      transaction.creditsPurchased = data.credits || 500
      transaction.code = `${data.vnd}vnd-${data.credits}-credits`
      transaction.updatedById = userData.id.toString() // ID c·ªßa ng∆∞·ªùi y√™u c·∫ßu thanh to√°n

      await this.creditRepo.save(transaction)

      return { success: true, messageId: info.messageId }
    } catch (error) {
      console.error('L·ªói g·ª≠i mail:', error)
      throw new Error('Kh√¥ng th·ªÉ g·ª≠i email')
    }
  }

  async sendFormEmail(data: CreateEmailDto) {
    const { fullName, email, phone, zalo } = data

    const mailOptions = {
      from: '2203viettt@gmail.com',
      to: 'nextadsai@gmail.com',
      subject: `Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ ${fullName}`,
      html: `
        <h3>Th√¥ng tin ng∆∞·ªùi li√™n h·ªá:</h3>
        <p><strong>H·ªç t√™n:</strong> ${fullName}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Phone:</strong> ${phone}</p>
        <p><strong>Zalo:</strong> ${zalo || 'Kh√¥ng cung c·∫•p'}</p>
      `,
    }

    try {
      const info = await this.transporter.sendMail(mailOptions)
      return { success: true, messageId: info.messageId }
    } catch (error) {
      console.error('L·ªói g·ª≠i mail:', error)
      throw new Error('Kh√¥ng th·ªÉ g·ª≠i email')
    }
  }

  @Cron('0 19 * * *', {
    timeZone: 'Asia/Ho_Chi_Minh', // ‚è∞ ƒë√∫ng gi·ªù VN
  })
  // @Cron('*/30 * * * * *')
  async reportAdInsights() {
    const today = moment().tz('Asia/Ho_Chi_Minh').startOf('day')
    const tomorrow = moment(today).add(1, 'day')
    const yesterday = moment(today).subtract(1, 'day')
    // const since = moment().subtract(1, 'month').format('YYYY-MM-DD')
    // const until = moment().format('YYYY-MM-DD')

    this.logger.log(`üîé B·∫Øt ƒë·∫ßu qu√©t d·ªØ li·ªáu qu·∫£ng c√°o l√∫c ${moment().format('YYYY-MM-DD HH:mm:ss')}`)

    const ads = await this.facebookAdRepo.find({
      where: [
        { startTime: Raw((date) => `DATE(${date}) = '${today.format('YYYY-MM-DD')}'`) },
        {
          startTime: LessThanOrEqual(tomorrow.toDate()),
          endTime: MoreThanOrEqual(today.toDate()),
        },
        { endTime: Raw((date) => `DATE(${date}) = '${yesterday.format('YYYY-MM-DD')}'`) },
      ],
      relations: ['createdBy'],
    })

    this.logger.log(`üì¶ T√¨m th·∫•y ${ads.length} qu·∫£ng c√°o c·∫ßn qu√©t.`)

    for (const ad of ads) {
      try {
        const response = await axios.get(`https://graph.facebook.com/v19.0/${ad.adId}/insights`, {
          params: {
            fields: [
              'date_start',
              'date_stop',
              'impressions',
              'reach',
              'frequency',
              'spend',
              'cpm',
              'cpc',
              'ctr',
              'clicks',
              'inline_link_clicks',
              'actions',
              'action_values',
              'video_avg_time_watched_actions',
              'purchase_roas'
            ].join(',')
            ,
            date_preset: 'maximum',
            access_token: ad.createdBy?.accessTokenUser,
          },
        });


        const data = response.data?.data?.[0]

        if (data) {
          this.logger.log(
            `üìä [AdID: ${ad.adId}] - Hi·ªÉn th·ªã: ${data.impressions}, Click: ${data.clicks}, Chi ph√≠: ${data.spend}ƒë`,
          )
          const spend = formatCurrency(data.spend)
          const ctr = format2(data.ctr)
          const cpm = formatCurrency(format2(data.cpm))
          let recommendation = 'Kh√¥ng c√≥ khuy·∫øn ngh·ªã.'

          try {
            const openaiRes = await axios.post(
              'https://api.openai.com/v1/chat/completions',
              {
                model: 'gpt-4',
                messages: [
                  {
                    role: 'system',
                    content:
                      'B·∫°n l√† chuy√™n gia qu·∫£ng c√°o Facebook. Ch·ªâ ƒë∆∞a ra 2‚Äì3 khuy·∫øn ngh·ªã ng·∫Øn g·ªçn v√† th·ª±c t·∫ø nh·∫•t ƒë·ªÉ t·ªëi ∆∞u qu·∫£ng c√°o d·ª±a tr√™n d·ªØ li·ªáu b√™n d∆∞·ªõi. Kh√¥ng c·∫ßn gi·∫£i th√≠ch d√†i d√≤ng, kh√¥ng lan man.',
                  },
                  {
                    role: 'user',
                    content: `
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu qu·∫£ng c√°o:

- Ad ID: ${ad.adId}
- Chi·∫øn d·ªãch: ${ad.campaignName}
- Hi·ªÉn th·ªã: ${data.impressions}
- Clicks: ${data.clicks}
- Chi ph√≠: ${spend} VNƒê
- CTR: ${ctr}%
- CPM: ${cpm} VNƒê

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn , ch·ªâ t·∫≠p trung v√†o ƒëi·ªÅu c·∫ßn c·∫£i thi·ªán nh·∫•t ƒë·ªÉ hi·ªáu qu·∫£ t·ªët h∆°n.
    `,
                  },
                ],
                temperature: 0.7,
                max_tokens: 900,
              },
              {
                headers: {
                  Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                },
              },
            )

            recommendation = openaiRes.data?.choices?.[0]?.message?.content || recommendation
            this.logger.log(`ü§ñ G·ª£i √Ω t·ª´ AI: ${recommendation}`)
          } catch (aiErr) {
            this.logger.error('‚ö†Ô∏è L·ªói khi g·ªçi OpenAI:', aiErr?.response?.data || aiErr.message)
          }

          // ‚úÖ G·ª≠i mail n·∫øu ng∆∞·ªùi t·∫°o c√≥ email
          if (ad.createdBy?.email) {
            const actions = data?.actions || [];
            const spend = parseFloat(data?.spend || 0).toLocaleString("vi-VN");
            const ctr = parseFloat(data?.ctr || 0).toFixed(2);
            const cpm = parseFloat(data?.cpm || 0).toLocaleString("vi-VN");
            const cpc = parseFloat(data?.cpc || 0).toLocaleString("vi-VN");
            const frequency = parseFloat(data?.frequency || 0).toFixed(2);
            const reach = parseInt(data?.reach || 0).toLocaleString("vi-VN");

            // Map t√™n action_type sang m√¥ t·∫£ ti·∫øng Vi·ªát
            const actionTypeMap: Record<string, string> = {
              post_engagement: "T∆∞∆°ng t√°c v·ªõi b√†i vi·∫øt",
              page_engagement: "T∆∞∆°ng t√°c v·ªõi trang",
              photo_view: "L∆∞·ª£t xem ·∫£nh",
              like: "L∆∞·ª£t th√≠ch",
              comment: "B√¨nh lu·∫≠n",
              share: "Chia s·∫ª",
              link_click: "Click v√†o li√™n k·∫øt",
              offsite_conversion: "Chuy·ªÉn ƒë·ªïi ngo√†i n·ªÅn t·∫£ng",
            };

            // C√°c lo·∫°i t∆∞∆°ng t√°c c·∫ßn t√≠nh t·ªïng
            const engagementTypes = Object.keys(actionTypeMap);

            // T√≠nh t·ªïng t∆∞∆°ng t√°c v√† hi·ªÉn th·ªã chi ti·∫øt
            let totalEngagement = 0;
            const engagementDetails = actions
              .filter(a => engagementTypes.includes(a.action_type))
              .map(a => {
                const label = actionTypeMap[a.action_type] || a.action_type;
                const value = parseInt(a.value);
                totalEngagement += value;
                return `<li>${label}: ${value}</li>`;
              }).join("");


            // HTML Report
            const htmlReport = `
  <h3>üì¢ Th·ªëng k√™ qu·∫£ng c√°o</h3>
  <p><strong>Ad ID:</strong> ${ad.adId}</p>
  <p><strong>Chi·∫øn d·ªãch:</strong> ${ad.campaignName}</p>
  <p><strong>Ng∆∞·ªùi t·∫°o:</strong> ${ad.createdBy.email}</p>
  <p><strong>üëÅ Hi·ªÉn th·ªã:</strong> ${data.impressions}</p>
  <p><strong>üôã‚Äç‚ôÇÔ∏è Reach:</strong> ${reach}</p>
  <p><strong>üîÅ T·∫ßn su·∫•t:</strong> ${frequency}</p>
  <p><strong>üñ± Click:</strong> ${data.clicks}</p>
  <p><strong>üîó Link Click:</strong> ${data.inline_link_clicks || 0}</p>
  <p><strong>üí∏ Chi ph√≠:</strong> ${spend} VNƒê</p>
  <p><strong>üìä CTR:</strong> ${ctr}% - CPM: ${cpm} VNƒê - CPC: ${cpc} VNƒê</p>
  <p><strong>üìå T·ªïng t∆∞∆°ng t√°c:</strong> ${totalEngagement}</p>
  <ul>${engagementDetails}</ul>
  <hr/>
  <h4>üìà G·ª£i √Ω t·ªëi ∆∞u h√≥a qu·∫£ng c√°o t·ª´ AI:</h4>
  <p>${recommendation.replace(/\n/g, '<br/>')}</p>
`;





            await this.transporter.sendMail({
              from: '2203viettt@gmail.com',
              to: ad.createdBy.email,
              subject: `üìä B√°o c√°o qu·∫£ng c√°o #${ad.adId} - ${moment().format('YYYY-MM-DD')}`,
              html: htmlReport,
            })

            // üîπ SAVE TO DB ‚Äî m·ªçi field ƒë·ªÅu l√† string
            try {
              await this.adInsightRepo.save({
                adId: String(ad.adId),
                campaignName: ad.campaignName ? String(ad.campaignName) : null,
                createdByEmail: ad.createdBy?.email ? String(ad.createdBy.email) : null,

                impressions: String(data.impressions ?? '0'),
                reach: String(data.reach ?? '0'),
                frequency: String(data.frequency ?? '0'),
                clicks: String(data.clicks ?? '0'),
                inlineLinkClicks: String(data.inline_link_clicks ?? '0'),
                spendVnd: String(data.spend ?? '0'),
                ctrPercent: String(data.ctr ?? '0'),
                cpmVnd: String(data.cpm ?? '0'),
                cpcVnd: String(data.cpc ?? '0'),

                totalEngagement: String(totalEngagement),
                engagementDetails: String(engagementDetails || ''), // n·∫øu mu·ªën JSON th√¨ ƒë·ªïi sang JSON.stringify(...)
                recommendation: recommendation ? String(recommendation) : null,
                htmlReport: String(htmlReport || ''),

                userId: ad.createdBy?.id ? String(ad.createdBy.id) : null,
              })
              this.logger.log(`üíæ ƒê√£ l∆∞u insight v√†o DB cho ad ${ad.adId}`)
            } catch (saveErr: any) {
              this.logger.error(`‚ùóÔ∏è L·ªói l∆∞u DB ad ${ad.adId}: ${saveErr.message}`, saveErr?.stack)
            }

            this.logger.log(`üì§ ƒê√£ g·ª≠i b√°o c√°o qu·∫£ng c√°o t·ªõi: ${ad.createdBy.email}`)
          } else {
            this.logger.warn(`‚ö†Ô∏è Kh√¥ng g·ª≠i email v√¨ ng∆∞·ªùi t·∫°o qu·∫£ng c√°o kh√¥ng c√≥ email.`)
          }
        } else {
          this.logger.warn(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu insights cho qu·∫£ng c√°o ${ad.adId}`)
        }
      } catch (error: any) {
        this.logger.error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu cho ad ${ad.adId}: ${error.message}`)
      }
    }

    this.logger.log(`‚úÖ ƒê√£ ho√†n t·∫•t qu√©t d·ªØ li·ªáu qu·∫£ng c√°o.`)
  }
}
