import { Injectable, Logger } from '@nestjs/common';
import * as nodemailer from 'nodemailer';
import { CreateEmailDto } from './dto/create-email.dto';
import { Cron } from '@nestjs/schedule';
import axios from 'axios';
import { InjectRepository } from '@nestjs/typeorm';
import { FacebookAd } from '@models/facebook-ad.entity';
import moment from 'moment-timezone';
import { Repository, Raw, LessThanOrEqual, MoreThanOrEqual } from 'typeorm';


@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);
  constructor(
    @InjectRepository(FacebookAd)
    private readonly facebookAdRepo: Repository<FacebookAd>
  ) { }

  private transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: '2203viettt@gmail.com',
      pass: 'tpzhvdoemquprhlo',
    },
  });

  async sendFormEmail(data: CreateEmailDto) {
    const { fullName, email, phone, zalo } = data;

    const mailOptions = {
      from: '2203viettt@gmail.com',
      to: 'nextadsai@gmail.com',
      subject: `Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ ${fullName}`,
      html: `
        <h3>Th√¥ng tin ng∆∞·ªùi li√™n h·ªá:</h3>
        <p><strong>H·ªç t√™n:</strong> ${fullName}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Phone:</strong> ${phone}</p>
        <p><strong>Zalo:</strong> ${zalo || 'Kh√¥ng cung c·∫•p'}</p>
      `,
    };

    try {
      const info = await this.transporter.sendMail(mailOptions);
      return { success: true, messageId: info.messageId };
    } catch (error) {
      console.error('L·ªói g·ª≠i mail:', error);
      throw new Error('Kh√¥ng th·ªÉ g·ª≠i email');
    }
  }

  @Cron('0 20 * * *') // üïó 8h t·ªëi m·ªói ng√†y
  // @Cron('*/30 * * * * *')
  async reportAdInsights() {
    const today = moment().tz('Asia/Ho_Chi_Minh').startOf('day');
    const tomorrow = moment(today).add(1, 'day');
    const yesterday = moment(today).subtract(1, 'day');
    const since = moment().subtract(1, 'month').format('YYYY-MM-DD');
    const until = moment().format('YYYY-MM-DD');

    this.logger.log(`üîé B·∫Øt ƒë·∫ßu qu√©t d·ªØ li·ªáu qu·∫£ng c√°o l√∫c ${moment().format('YYYY-MM-DD HH:mm:ss')}`);

    const ads = await this.facebookAdRepo.find({
      where: [
        { startTime: Raw(date => `DATE(${date}) = '${today.format('YYYY-MM-DD')}'`) },
        {
          startTime: LessThanOrEqual(tomorrow.toDate()),
          endTime: MoreThanOrEqual(today.toDate()),
        },
        { endTime: Raw(date => `DATE(${date}) = '${yesterday.format('YYYY-MM-DD')}'`) },
      ],
      relations: ['createdBy'],
    });
    // const ads =[{}]

    // 120228662252270337

    this.logger.log(`üì¶ T√¨m th·∫•y ${ads.length} qu·∫£ng c√°o c·∫ßn qu√©t.`);

    for (const ad of ads) {
      try {
        const response = await axios.get(`https://graph.facebook.com/v19.0/${ad.adId}/insights`, {
          params: {
            fields: 'impressions,clicks,spend,ctr,cpc,cpm',
            'time_range[since]': since,
            'time_range[until]': until,
            access_token: ad.createdBy?.accessTokenUser,
          },
        });

        const data = response.data?.data?.[0];

        if (data) {
          this.logger.log(`üìä [AdID: ${ad.adId}] - Hi·ªÉn th·ªã: ${data.impressions}, Click: ${data.clicks}, Chi ph√≠: ${data.spend}ƒë`);

          // 2. G·ªçi OpenAI ƒë·ªÉ xin khuy·∫øn ngh·ªã t·ªëi ∆∞u qu·∫£ng c√°o
          let recommendation = "Kh√¥ng c√≥ khuy·∫øn ngh·ªã.";

          try {
            const openaiRes = await axios.post(
              "https://api.openai.com/v1/chat/completions",
              {
                model: "gpt-4",
                messages: [
                  {
                    role: "system",
                    content: "B·∫°n l√† chuy√™n gia qu·∫£ng c√°o Facebook. Ch·ªâ ƒë∆∞a ra 2‚Äì3 khuy·∫øn ngh·ªã ng·∫Øn g·ªçn v√† th·ª±c t·∫ø nh·∫•t ƒë·ªÉ t·ªëi ∆∞u qu·∫£ng c√°o d·ª±a tr√™n d·ªØ li·ªáu b√™n d∆∞·ªõi. Kh√¥ng c·∫ßn gi·∫£i th√≠ch d√†i d√≤ng, kh√¥ng lan man.",
                  },
                  {
                    role: "user",
                    content: `
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu qu·∫£ng c√°o:

- Ad ID: ${ad.adId}
- Chi·∫øn d·ªãch: ${ad.campaignName}
- Hi·ªÉn th·ªã: ${data.impressions}
- Clicks: ${data.clicks}
- Chi ph√≠: ${data.spend} VNƒê
- CTR: ${data.ctr}%
- CPC: ${data.cpc} VNƒê
- CPM: ${data.cpm} VNƒê

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn , ch·ªâ t·∫≠p trung v√†o ƒëi·ªÅu c·∫ßn c·∫£i thi·ªán nh·∫•t ƒë·ªÉ hi·ªáu qu·∫£ t·ªët h∆°n.
    `,
                  }
                ],
                temperature: 0.7,
                max_tokens: 900,
              },
              {
                headers: {
                  Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                },
              }
            );

            recommendation = openaiRes.data?.choices?.[0]?.message?.content || recommendation;
            this.logger.log(`ü§ñ G·ª£i √Ω t·ª´ AI: ${recommendation}`);
          } catch (aiErr) {
            this.logger.error("‚ö†Ô∏è L·ªói khi g·ªçi OpenAI:", aiErr?.response?.data || aiErr.message);
          }


          // ‚úÖ G·ª≠i mail n·∫øu ng∆∞·ªùi t·∫°o c√≥ email
          if (ad.createdBy?.email) {
            const htmlReport = `
            <h3>üì¢ Th·ªëng k√™ qu·∫£ng c√°o</h3>
            <p><strong>Ad ID:</strong> ${ad.adId}</p>
            <p><strong>Chi·∫øn d·ªãch:</strong> ${ad.campaignName}</p>
            <p><strong>Ng∆∞·ªùi t·∫°o:</strong> ${ad.createdBy.email}</p>
            <p><strong>üëÅ Hi·ªÉn th·ªã:</strong> ${data.impressions}</p>
            <p><strong>üñ± Click:</strong> ${data.clicks}</p>
            <p><strong>üí∏ Chi ph√≠:</strong> ${data.spend} VNƒê</p>
            <p><strong>CTR:</strong> ${data.ctr}% - CPM: ${data.cpm}</p>
            <hr/>
          <h4>üìà G·ª£i √Ω t·ªëi ∆∞u h√≥a qu·∫£ng c√°o t·ª´ AI:</h4>
          <p>${recommendation.replace(/\n/g, "<br/>")}</p>
          `;

            await this.transporter.sendMail({
              from: '2203viettt@gmail.com',
              to: ad.createdBy.email,
              subject: `üìä B√°o c√°o qu·∫£ng c√°o #${ad.adId} - ${moment().format('YYYY-MM-DD')}`,
              html: htmlReport,
            });

            this.logger.log(`üì§ ƒê√£ g·ª≠i b√°o c√°o qu·∫£ng c√°o t·ªõi: ${ad.createdBy.email}`);
          } else {
            this.logger.warn(`‚ö†Ô∏è Kh√¥ng g·ª≠i email v√¨ ng∆∞·ªùi t·∫°o qu·∫£ng c√°o kh√¥ng c√≥ email.`);
          }
        } else {
          this.logger.warn(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu insights cho qu·∫£ng c√°o ${ad.adId}`);
        }
      } catch (error: any) {
        this.logger.error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu cho ad ${ad.adId}: ${error.message}`);
      }
    }

    this.logger.log(`‚úÖ ƒê√£ ho√†n t·∫•t qu√©t d·ªØ li·ªáu qu·∫£ng c√°o.`);
  }

}


